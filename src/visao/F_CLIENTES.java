package visao;

import conexao.ConnConexao;
import biblioteca.Biblioteca;
import biblioteca.GerarNumerosAleatorios;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import biblioteca.ModeloTabela;
import controle.CtrlCliente;
import controle.ControleListaClientes;
import Dao.DAOCliente;
import biblioteca.CampoLimitadoParaRFSomenteNumeros;
import biblioteca.MetodosPublicos;
import static biblioteca.VariaveisPublicas.codigoSelecionado;
import static biblioteca.VariaveisPublicas.contador;
import static biblioteca.VariaveisPublicas.nomeRelatorio;
import static biblioteca.VariaveisPublicas.entidadeInativa;
import static biblioteca.VariaveisPublicas.idUsuarioInativado;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.ListSelectionModel;
import static biblioteca.VariaveisPublicas.tabela;
import static biblioteca.VariaveisPublicas.sql;
import static biblioteca.VariaveisPublicas.totalRegs;
import controle.ControleGravarLog;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import modelo.Cliente;

public class F_CLIENTES extends javax.swing.JFrame {

    ConnConexao conexao                 = new ConnConexao();
    Biblioteca umabiblio                = new Biblioteca();
    MetodosPublicos  umMetodo           = new MetodosPublicos();
    Cliente umModCliente                = new Cliente();
    CtrlCliente ctrCliente              = new CtrlCliente();
    ControleListaClientes umCtrLista    = new ControleListaClientes();
    ControleGravarLog umGravarLog       = new ControleGravarLog();
    DAOCliente clienteDAO               = new DAOCliente();
    
    Boolean clicouNaTabela = false;
    int codigo, idSecaoRegSel, ind, deptoid, idUsuario = 0;
    String secao, rf, nome, sNomeSecao, obs, tipo, departamento, setartipo,tiposetado,nomeDigitado, nomeSecaoIni = "";
    boolean cadastrando;  //controla no botão gravar entre gravar novo registro e gravar alteração de um registro
    String sqlDefault = "select c.*, s.nome as secao,s.ramal from tblclientes c, tblsecoes s where s.codigo = c.secaoid and c.status='ATIVO' order by c.nome,s.nome";
    String sqlVazia   = "select * from tblclientes where codigo = 0";

    public F_CLIENTES() {
        initComponents();
        PreencherTabela(sqlDefault);
        Leitura();
        setResizable(false);   //desabilitando o redimencionamento da tela        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE); //desabilitando o botao fechar
        this.setTitle(umabiblio.mostrarTituloDoFormulario());
        //configuracoes dos edits   
        umabiblio.configurarCamposTextos(txtPESQUISA);
        umabiblio.configurarCamposTextos(txtCODIGO);
        umabiblio.configurarCamposTextos(txtNOME);
        umabiblio.configurarCamposTextos(txtRF);

        //Impede que formulario seja arrastado na tela
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentMoved(ComponentEvent e) {
                setEnabled(false);
                setEnabled(true);
            }
        });//fim addComponentListener       

        //configuração dos botões
        umabiblio.configurarBotoes(btnNovo);
        umabiblio.configurarBotoes(btnEditar);
        umabiblio.configurarBotoes(btnGravar);
        umabiblio.configurarBotoes(btnImprimir);
        umabiblio.configurarBotoes(btnVoltar);
        umabiblio.configurarBotoes(btnSair);
        jTabela.setFont(new Font("Arial", Font.BOLD, 12));
        txtOBS.setFont(new Font("TimesRoman", Font.BOLD, 12));
        txtCODIGO.setForeground(Color.red);
        txtRF.setDocument(new CampoLimitadoParaRFSomenteNumeros(7));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBoxDados = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        txtNOME = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtCODIGO = new javax.swing.JTextField();
        cmbSecao = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtRF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtOBS = new javax.swing.JTextField();
        jBoxBotoes = new javax.swing.JLayeredPane();
        btnGravar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnNovo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabela = new javax.swing.JTable();
        jBoxPesquisar = new javax.swing.JLayeredPane();
        txtPESQUISA = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jBoxDados.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jBoxDados.setName("panelDados"); // NOI18N

        jLabel1.setText("NOME");

        txtNOME.setForeground(new java.awt.Color(51, 51, 255));
        txtNOME.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNOMEFocusGained(evt);
            }
        });
        txtNOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNOMEKeyPressed(evt);
            }
        });

        jLabel3.setText("CÓDIGO");

        cmbStatus.setForeground(new java.awt.Color(51, 51, 255));
        cmbStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel2.setText("STATUS");

        txtCODIGO.setForeground(new java.awt.Color(51, 51, 255));
        txtCODIGO.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCODIGO.setName("txtCODIGO"); // NOI18N

        cmbSecao.setForeground(new java.awt.Color(51, 51, 255));
        cmbSecao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbSecao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSecaoKeyPressed(evt);
            }
        });

        jLabel4.setText("SEÇÃO");

        jLabel5.setText("RF 9999999");

        txtRF.setForeground(new java.awt.Color(51, 51, 255));
        txtRF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRFFocusGained(evt);
            }
        });
        txtRF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtRFMouseClicked(evt);
            }
        });
        txtRF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRFKeyPressed(evt);
            }
        });

        jLabel8.setText("OBSERVAÇÕES");

        txtOBS.setForeground(new java.awt.Color(51, 51, 255));

        jBoxDados.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtNOME, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(cmbStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtCODIGO, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(cmbSecao, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtRF, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtOBS, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jBoxDadosLayout = new javax.swing.GroupLayout(jBoxDados);
        jBoxDados.setLayout(jBoxDadosLayout);
        jBoxDadosLayout.setHorizontalGroup(
            jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxDadosLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                        .addComponent(txtOBS)
                        .addContainerGap())
                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtRF, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jBoxDadosLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                .addGap(275, 275, 275))
                            .addComponent(cmbSecao, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addContainerGap())
                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jBoxDadosLayout.createSequentialGroup()
                                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                                        .addComponent(txtCODIGO, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, Short.MAX_VALUE))
                                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(42, 42, 42)))
                                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(txtNOME, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 10, Short.MAX_VALUE))))
        );
        jBoxDadosLayout.setVerticalGroup(
            jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCODIGO, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNOME, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jBoxDadosLayout.createSequentialGroup()
                                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(31, 31, 31))
                            .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtRF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbSecao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOBS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        getContentPane().add(jBoxDados);
        jBoxDados.setBounds(10, 80, 740, 200);

        jBoxBotoes.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        btnGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_gravar.jpg"))); // NOI18N
        btnGravar.setText("Gravar");
        btnGravar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGravar.setEnabled(false);
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_inicio.gif"))); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_sair.gif"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/users16.jpg"))); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_blocoNotas.gif"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_imprimir.gif"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        jBoxBotoes.setLayer(btnGravar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnVoltar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnSair, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnNovo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnEditar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnImprimir, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jBoxBotoesLayout = new javax.swing.GroupLayout(jBoxBotoes);
        jBoxBotoes.setLayout(jBoxBotoesLayout);
        jBoxBotoesLayout.setHorizontalGroup(
            jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jBoxBotoesLayout.setVerticalGroup(
            jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnNovo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGravar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jBoxBotoes);
        jBoxBotoes.setBounds(10, 290, 740, 67);

        jTabela.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTabela.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTabela);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 370, 740, 250);

        jBoxPesquisar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jBoxPesquisar.setName("panelDados"); // NOI18N

        txtPESQUISA.setToolTipText("Digite INATIVOS para imprimir todos os registos com status inativatdos");
        txtPESQUISA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPESQUISAKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPESQUISAKeyReleased(evt);
            }
        });

        jBoxPesquisar.setLayer(txtPESQUISA, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jBoxPesquisarLayout = new javax.swing.GroupLayout(jBoxPesquisar);
        jBoxPesquisar.setLayout(jBoxPesquisarLayout);
        jBoxPesquisarLayout.setHorizontalGroup(
            jBoxPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxPesquisarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtPESQUISA, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                .addContainerGap())
        );
        jBoxPesquisarLayout.setVerticalGroup(
            jBoxPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxPesquisarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtPESQUISA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(jBoxPesquisar);
        jBoxPesquisar.setBounds(10, 10, 740, 60);

        setSize(new java.awt.Dimension(773, 667));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
        
    private void popularComboSecoes() {
        umabiblio.PreencherCombo(cmbSecao, "tblsecoes", "nome");
        cmbSecao.setSelectedIndex(-1);
    }    
       
    private void popularComboStatus() {
        cmbStatus.removeAllItems();
        cmbStatus.addItem("ATIVO");
    }
    
    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        //populando os combobox
        if(umabiblio.permissaoLiberada())
        {            
            popularComboStatus();               
            popularComboSecoes();
            
            //controlando os botoes
            HabilitarDesabilitarBotoes(false);
            btnVoltar.setText("Cancelar");
            umabiblio.limparTodosCampos(jBoxDados);
            txtPESQUISA.setText(null);
            txtNOME.requestFocus();
            txtNOME.setEditable(true);
            txtOBS.setEditable(true);
            txtRF.setEditable(true);
            cadastrando = true;
            txtCODIGO.setText(String.valueOf(umabiblio.mostrarProximoCodigo(tabela)));
            PreencherTabela(sqlVazia);
        }

    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        if (cadastrando)
        {
            gravarRegistro();     
        } else {
            editarRegistro();           
        }  
        Leitura();

    }//GEN-LAST:event_btnGravarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        Leitura();        
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if(umabiblio.permissaoLiberada()){
            Edicao();
            //controla apresentacao dos edits        
            txtNOME.setEditable(true);            
                                    
            txtOBS.setEditable(true);
            txtNOME.requestFocus();

            //limpa a como secao
            cmbSecao.removeAllItems();
            //popular a combo secao com todas as secoes cadastradas
            umabiblio.PreencherCombo(cmbSecao, "tblsecoes", "nome");
            //seta a seção atual do usuario atraves do nome da seçao passada
            cmbSecao.getModel().setSelectedItem(sNomeSecao);

            //popular a combo status com opcoes ATIVO pra manter inalterado e INATIVO caso deseje inativar
            cmbStatus.removeAllItems();
            cmbStatus.addItem("ATIVO");
            cmbStatus.addItem("INATIVO");

            PreencherTabela(sqlVazia);
        }

    }//GEN-LAST:event_btnEditarActionPerformed

    public String MostrarSecaoSelecionada(int idSecao) {
        //utilizada quando o usuario clicar em um registro da tabela
        conexao.conectar();
        sql = "select * from tblsecoes where codigo =" + idSecao;
        conexao.ExecutarPesquisaSQL(sql);
        try {
            if (conexao.rs.next()) {
                conexao.rs.first();
                sNomeSecao = conexao.rs.getString("nome");
                cmbSecao.removeAllItems();      //primeiro apaga os ítens que foram selecionados anteriormente
                cmbSecao.addItem(sNomeSecao);   //seta a seçao do usuario selecionado                
                //JOptionPane.showMessageDialog(null,"SECAO SELECIONADA..: " +conexao.resultset.getString("nome"));
            };
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao pesquisar seção!\nErro: " + ex.getMessage());
            return null;
        } finally {
            conexao.desconectar();
        }
        return sNomeSecao;
    }

    private void mostrarDados() {
        //AO CLICAR EM UM REGISTRO DA TABELA MOSTRAR OS DADOS NOS EDITS        
        int codigo = (int) jTabela.getValueAt(jTabela.getSelectedRow(), 0);
        codigoSelecionado = codigo;

        //seta o nivel de acesso do usuario ao clicar na tabela e mostra a seção do mesmo
        sql = "SELECT * FROM tblclientes WHERE codigo=" + codigo + "";
        
        conexao.conectar();
        conexao.ExecutarPesquisaSQL(sql);
        
        try {
            conexao.rs.first();
            txtCODIGO.setText(String.valueOf(conexao.rs.getInt("codigo")));
            txtNOME.setText(conexao.rs.getString("nome"));
            txtRF.setText(conexao.rs.getString("rf"));
            txtOBS.setText(conexao.rs.getString("obs"));            
            idSecaoRegSel = conexao.rs.getInt("secaoid");
            tiposetado = conexao.rs.getString("tipo");

            //mostro o status
            cmbStatus.removeAllItems();
            cmbStatus.addItem(conexao.rs.getString("status"));
            MostrarSecaoSelecionada(idSecaoRegSel);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao tentar selecionar a seção!\nERRO:" + ex.getMessage());
        } finally {
            conexao.desconectar();
        }

        //controla apresentacao dos edits
        txtPESQUISA.setEditable(false);
        txtCODIGO.setEnabled(true);
        txtCODIGO.setEditable(false);
        txtNOME.setEnabled(true);
        txtNOME.setEditable(false);
        txtOBS.setEnabled(true);
        txtOBS.setEditable(false);
        txtRF.setEnabled(true);
        txtRF.setEditable(false);

    }

    private void jTabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaMouseClicked
        //AO CLICAR EM UM REGISTRO DA TABELA MOSTRAR OS DADOS NOS EDITS
        clicouNaTabela = true;
        mostrarDados();
        btnEditar.setEnabled(true);
        btnGravar.setEnabled(false);
        btnNovo.setEnabled(false);
        btnImprimir.setEnabled(true); //assim poderá imprimir o registro selecionado
        btnVoltar.setEnabled(true);
        btnSair.setEnabled(false);
        cmbSecao.setEnabled(true);
        cmbStatus.setEnabled(true);
        nomeSecaoIni  = cmbSecao.getSelectedItem().toString();
        idUsuario     = Integer.parseInt(txtCODIGO.getText());

    }//GEN-LAST:event_jTabelaMouseClicked

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        if(txtPESQUISA.getText().equals("INATIVOS")) 
        { 
            if(!umMetodo.temInativos(tabela))
            {
                JOptionPane.showMessageDialog(null, "Essa tabela não tem registros inativados no momento!", "Nada encontrado!", 2);
                btnVoltarActionPerformed(null);
                }else{        
                    contador++;

                    //IMPRESSAO DO RELATORIO PARA IMPRESSORA
                    if (clicouNaTabela) {
                        nomeRelatorio = "relclienteselecionado";
                    } else {            
                        nomeRelatorio = "relclientes";
                    }

                    entidadeInativa = txtPESQUISA.getText(); //DEFINE SE IMPRIMIRA ATIVOS OU INATIVOS-> DIGITE INATIVOS NA PESQUISA
                   
                    //IMPRESSAO DO PDF
                    F_IMPRESSAO frm = new F_IMPRESSAO();
                    frm.setVisible(true);
                }
        }else{
            
                    contador++;

                    //IMPRESSAO DO RELATORIO PARA IMPRESSORA
                    if (clicouNaTabela) {
                        nomeRelatorio = "relclienteselecionado";
                    } else {            
                        nomeRelatorio = "relclientes";
                    }

                    entidadeInativa = txtPESQUISA.getText(); //DEFINE SE IMPRIMIRA ATIVOS OU INATIVOS-> DIGITE INATIVOS NA PESQUISA
                   
                    //IMPRESSAO DO PDF
                    F_IMPRESSAO frm = new F_IMPRESSAO();
                    frm.setVisible(true);
        }   
        btnVoltar.setEnabled(true);
        btnImprimir.setEnabled(false);
        btnNovo.setEnabled(false);
    
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void txtNOMEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNOMEFocusGained
        txtNOME.selectAll();//selecionando todo o texto pra edição        
    }//GEN-LAST:event_txtNOMEFocusGained

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        conexao.conectar();
        String sql = "select * from tblclientes where status='ATIVO' order by nome";
        conexao.ExecutarPesquisaSQL(sql);
        try {
            if (conexao.rs.next()) {   //selecionando a primeira linha somente se tiver registros
                jTabela.addRowSelectionInterval(0, 0);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher o combo de seções!\nErro: " + ex.getMessage());
        } finally {
            conexao.desconectar();
        }
    }//GEN-LAST:event_formWindowOpened

    private void txtPESQUISAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPESQUISAKeyPressed
        //se teclar enter estando dentro da pesquisa limpar a pesquisa
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtPESQUISA.setText(null);
            
        }        
    }//GEN-LAST:event_txtPESQUISAKeyPressed
    private void filtrarPorDigitacao(String pPesq) {
        //filtrando por digitação pelos trez campos nome rf ou secao
        PreencherTabela("select c.*, s.nome as secao,s.ramal from tblclientes c, tblsecoes s where (c.nome like '%" + pPesq + "%'" + " "
                + "OR c.rf like '%" + pPesq + "%'" + " OR s.nome like '%" + pPesq + "%'" + ") and s.codigo = c.secaoid "
                + "and c.status='ATIVO' order by s.nome,c.nome");
        this.setTitle("Total de registros retornados pela pesquisa = "+totalRegs);
    }
    private void txtPESQUISAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPESQUISAKeyReleased
        //filtrar o nome conforme o cliente for digitando
        filtrarPorDigitacao(txtPESQUISA.getText());
    }//GEN-LAST:event_txtPESQUISAKeyReleased
         
    private void txtRFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRFFocusGained
                
        nomeDigitado  = txtNOME.getText();       

        if (cadastrando){
            
            if(umMetodo.temCadastradoNaTabela("TBLCLIENTES","nome",nomeDigitado)){
               JOptionPane.showMessageDialog(null, "Atenção o cliente "+nomeDigitado+" já esta cadastrado ou inativado, verifique!","DUPLICIDADE DE CADASTRO",2);               
                btnVoltarActionPerformed(null);
            }else{     
                //DESCOBRINDO QTOS CARACTERES TEM ANTES DO PRIMEIRO ESPAÇO NA STRING DIGITADA OU SEJA DO PRIMEIRO NOME
                int qdeCaracteresAntesDoEspacoNaString = nomeDigitado.indexOf(" ");
                
                if(qdeCaracteresAntesDoEspacoNaString > 0)
                {
                    //RECONSTRUINDO A STRING CORTADA COM A QDE DE CARACTERES DESCOBERTO
                    nomeDigitado = nomeDigitado.substring(0, qdeCaracteresAntesDoEspacoNaString);                
                    //JOptionPane.showMessageDialog(null, "Qde caracteres vazios : "+qdeCaracteresAntesDoEspacoNaString);    

                    if(umMetodo.temCadastradoNaTabela("TBLCLIENTESVIRTUAIS","nome",nomeDigitado))
                    {
                           //JOptionPane.showMessageDialog(null, "NOME DIGITADO "+nomeDigitado+" NÃO É UM CLIENTE VIRTUAL");
                           Long n = new Long("0123456");                                       //novo long com tamanho 7
                           GerarNumerosAleatorios rf = new GerarNumerosAleatorios(n);          //passo o long
                           txtRF.setText(String.valueOf(rf.getNumeroAleatorioRF()));  
                           setartipo = "N"; //SE É UM CLIENTE VIRTUAL ENTAO setartipo = "N"; 
                           cmbSecao.requestFocus(); 

                    }else{
                        setartipo = "F"; //SE NÃO É UM CLIENTE VIRTUAL ENTAO setartipo = "F"; 
                        txtRF.requestFocus();
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Atenção este campo requer um nome e sobrenome do colaborador!","Nome incompleto",2);      
                    btnVoltarActionPerformed(null);
                }                
            }
        }       
        
    }//GEN-LAST:event_txtRFFocusGained

    private void txtRFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtRFMouseClicked
        txtRF.selectAll();
    }//GEN-LAST:event_txtRFMouseClicked

    private void txtNOMEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNOMEKeyPressed
        //se teclar enter estando dentro do txtNOME vá para o campo do rf
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtRF.requestFocus();
        }
                    
    }//GEN-LAST:event_txtNOMEKeyPressed

    private void txtRFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFKeyPressed
        //se teclar enter estando dentro do campo pular para o proximo determinado
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbSecao.requestFocus();
        }
    }//GEN-LAST:event_txtRFKeyPressed

    private void cmbSecaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSecaoKeyPressed
        //se teclar enter estando dentro do campo pular para o proximo determinado
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtOBS.requestFocus();
        }
    }//GEN-LAST:event_cmbSecaoKeyPressed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_CLIENTES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_CLIENTES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_CLIENTES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_CLIENTES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_CLIENTES().setVisible(true);

            }
        });
    }

    private void gravarRegistro() {
        //se digitou algo nos campos nome e rf        
        if (txtNOME.getText().length() > 0 && txtRF.getText().length() > 0) 
        {
            //setando os valores dos edits   
            String nomeSecao    = cmbSecao.getSelectedItem().toString(); //passando o nome da secao selecionada 
            nome                = txtNOME.getText();
            rf                  = txtRF.getText();
            obs                 = txtOBS.getText();
            departamento        = umMetodo.retornaDepto(cmbSecao.getSelectedItem().toString());
            deptoid             = umMetodo.getCodigoPassandoString("tbldepartamentos", "nome", departamento);
            String status       = cmbStatus.getSelectedItem().toString();
            int codSecao        = umMetodo.retornaCodigo("tblsecoes", "nome", nomeSecao);   //clienteDAO.buscarCodigo(nomeSecao);  //passando o codigo da secao selecionada 

            umModCliente.setNome(nome);
            umModCliente.setRf(rf);
            umModCliente.setObs(obs);
            umModCliente.setSecaoid(codSecao);
            umModCliente.setDeptoid(deptoid);
            umModCliente.setStatus(status);
            umModCliente.setTipo(setartipo);           
                      
            if (cadastrando) {
                
                if (umMetodo.temDuplicidadeDeCadastro("TBLCLIENTES","RF",txtRF.getText())){
                  JOptionPane.showMessageDialog(null, "O RF digitado já esta cadastrado, verifique!","Duplicidade no cadastro do RF!",2); 
                  txtRF.requestFocus();
                }else{                
                    ctrCliente.salvarCliente(umModCliente);
                    JOptionPane.showMessageDialog(null,"Cliente cadastrado com sucesso!"); 
                    umGravarLog.gravarLog("cadastro de " + umModCliente.getNome());
                    PreencherTabela(sqlDefault);
                    cadastrando = false;
                }
               
            }
        } else {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos para continuar!","Campos vazios!",2);
            txtNOME.requestFocus(); //foco no campo secao
        }
        
    }

    private void editarRegistro() 
    {
        //setando os valores dos edits  
        String status = (String) cmbStatus.getSelectedItem();
        nome          = txtNOME.getText();
        rf            = txtRF.getText();
        obs           = txtOBS.getText();
        codigo        = Integer.parseInt(txtCODIGO.getText());
        departamento  = umMetodo.retornaDepto(cmbSecao.getSelectedItem().toString());
        deptoid       = umMetodo.getCodigoPassandoString("tbldepartamentos", "nome", departamento);
        String nomeDaSecaoCliente    = "";
        String nomeSemUsuarioDaSecao = "";
        int idSemUsuarioDaSecao      = 0;
        
        //JOptionPane.showMessageDialog(rootPane, "id do depto = "+deptoid);
        //recebe o codigo da seção selecionada pela variavel codigo no retorno da função
        
        int idSecao = umMetodo.retornaCodigo("tblsecoes", "nome", cmbSecao.getSelectedItem().toString());    //clienteDAO.buscarCodigo(cmbSecao.getSelectedItem().toString());        
       
        umModCliente.setCodigo(codigo);
        umModCliente.setNome(nome);
        umModCliente.setRf(rf);
        umModCliente.setObs(obs);
        umModCliente.setStatus(status);
        umModCliente.setSecaoid(idSecao);
        umModCliente.setDeptoid(deptoid);
        umModCliente.setTipo(tiposetado);       
                
        //ATUALIZAR TB O CLIENTE DA TABELA DE USUARIOS SE O MESMO TB FOR USUARIO DO SISTEMA
        int codigoUsuario = umMetodo.getCodigoPassandoString("tblusuarios", "nome", nome);
        umMetodo.alterarSecaoUsuarioSeForAlteradaSecaoDoClienteColaborador(idSecao, codigoUsuario);
     
        //SE STATUS = INATIVO ATUALIZAR O CLIENTEID PARA SEM USUARIO DA SEÇÃO DE TODOS OS EQUIPAMENTOS DESSE COLABORADOR
        //UPDATE TBLPATRIMONIOS SET CLIENTEID=? WHERE CLIENTEID = IDDESSECLIENTE
        if(cmbStatus.getSelectedItem().toString().equals("INATIVO"))
        {            
            //atualizarCLIENTEID das estações do usuário que esta sendo inativado para SEM USUARIO (SECAO)
            nomeDaSecaoCliente    = cmbSecao.getSelectedItem().toString();
            
            //USUARIO A SER INATIVADO
            nomeSemUsuarioDaSecao = "SEM USUARIO "+nomeDaSecaoCliente; 
            
            //SETA ID DO USUARIO COMO SENDO : SEM USUARIO DA SECAO
            idSemUsuarioDaSecao   = umMetodo.getCodigoPassandoString("tblclientes", "nome", nomeSemUsuarioDaSecao); //293 SEM USUARIO DOG
            
            //PEGANDO O ID DO USUARIO SE ESTE CLIENTE FOR USUARIO DO SISTEMA PARA POSTERIOR INATIVAÇÃO
            idUsuarioInativado           = umMetodo.getCodigoPassandoString("tblusuarios", "nome", txtNOME.getText().toString());
            umMetodo.atualizarPatrimoniosParaSemUsuarioDaSecaoDoColaboradorInativado(idSemUsuarioDaSecao,codigo);  
            
        }else{
            //USUARIO TRANSFERIDO JUNTAMENTE COM SEUS EQUIPTOS PARA OUTRO SETOR           
            if(umabiblio.ConfirmouOperacao("Deseja transferir os equipamentos juntamente com o usuário?", "Transferindo usuário de setor!")){
                umMetodo.atualizarSecaoDosPatrimoniosDoUsuarioNaNovaSecao(idSecao,codigo);  
            }else{
                //USUARIO TRANSFERIDO PARA OUTRO SETOR SEM OS EQUIPTOS QUE FICARAM NO SETOR ATUAL         
                nomeSemUsuarioDaSecao = "SEM USUARIO "+nomeSecaoIni; 
                
                //SETA ID DO USUARIO COMO SENDO : SEM USUARIO DA SECAO
                idSemUsuarioDaSecao   = umMetodo.getCodigoPassandoString("tblclientes", "nome", nomeSemUsuarioDaSecao); //293 SEM USUARIO DOG                
                umMetodo.atualizarPatrimoniosParaSemUsuarioDaSecaoDoColaboradorTransferido(idSemUsuarioDaSecao,idUsuario);                
            }
        }
        ctrCliente.atualizarCliente(umModCliente);
        umGravarLog.gravarLog("atualizacao no cadastro de " + umModCliente.getNome());
        
        Leitura();
        PreencherTabela(sqlDefault);
        txtNOME.setEditable(false);
        cadastrando = false;
    }

    private void Edicao() {
        //metodo para quando usuario clicar em Editar
        boolean Habilitar = true;
        Component[] c = null;
        cadastrando = false;

        btnNovo.setEnabled(!Habilitar);
        btnImprimir.setEnabled(!Habilitar);
        btnSair.setEnabled(!Habilitar);
        btnGravar.setEnabled(Habilitar);
        btnEditar.setEnabled(!Habilitar);
        btnVoltar.setEnabled(Habilitar);
        btnVoltar.setText("Cancelar");

        //preenchendo a tabela com os registros
        PreencherTabela(sqlDefault);

        //desabilitando os edits para edicao
        c = jBoxDados.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(Habilitar);
        }
        txtCODIGO.setEditable(false);
        txtNOME.requestFocus();
        
        String valorTipo = umMetodo.verificarvalordocampo("tblclientes","tipo",Integer.parseInt(txtCODIGO.getText()));
        
        if(valorTipo.equals("N")){
                txtRF.setEditable(false);
        }else{
            txtRF.setEditable(true);
        }

        //mostrando o titulo com qde de registros cadastrados
        this.setTitle(umabiblio.mostrarTituloDoFormulario());

        //habilitando a pesquisa  e preenchendo a tabela se tiver registros
        c = jBoxPesquisar.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(!Habilitar);
        }
    }

    public void Leitura() {
        //formatacao inicial dos botoes ao abrir o formulario
        boolean Habilitar = true;
        Component[] c     = null;
        cadastrando       = false;
        clicouNaTabela    = false;
        contador          = 0;
        
        txtPESQUISA.setEditable(true);        

        btnNovo.setEnabled(Habilitar);
        btnImprimir.setEnabled(Habilitar);
        btnSair.setEnabled(Habilitar);
        btnGravar.setEnabled(!Habilitar);
        btnEditar.setEnabled(!Habilitar);
        btnVoltar.setEnabled(!Habilitar);        
        
        //preenchendo a tabela com os registros
        PreencherTabela(sqlDefault);

        //desabilitando os edits para edicao
        c = jBoxDados.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(!Habilitar);
            umabiblio.limparTodosCampos(this);
            txtPESQUISA.requestFocus();
        }

        //mostrando o titulo com qde de registros cadastrados
        this.setTitle(umabiblio.mostrarTituloDoFormulario());

        //pulando de campo com enter, nao usei porque esse procedimento desabilita o metodo de enter pra apagar o campo de pesquisa
        //umabiblio.passaCamposComEnter(this);
        //limpando os combos 
        umabiblio.LimparCombo(cmbSecao, "tblsecoes", "nome");
        cmbStatus.setSelectedIndex(-1);        

        //habilitando a pesquisa  e preenchendo a tabela se tiver registros
        c = jBoxPesquisar.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(Habilitar);
        }
    }

    public void HabilitarDesabilitarBotoes(boolean Habilitar) {
        //ações para quando clicar em cada botão
        Component[] c = null;

        btnNovo.setEnabled(Habilitar);
        btnGravar.setEnabled(!Habilitar);
        btnEditar.setEnabled(Habilitar);
        btnVoltar.setEnabled(!Habilitar);
        btnImprimir.setEnabled(Habilitar);
        btnSair.setEnabled(Habilitar);

        //habilitando os edits para edicao
        c = jBoxDados.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(!Habilitar);
        }

        //desabilitando a pesquisa enquanto cadastra
        c = jBoxPesquisar.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(Habilitar);
        }
      
    }

    public void PreencherTabela(String sql) {
        conexao.conectar();
        ArrayList dados = new ArrayList();
        //para receber os dados das colunas(exibe os titulos das colunas)
        String[] Colunas = new String[]{"Código", "Nome", "RF", "Seção", "Ramal"};
        try {
            conexao.ExecutarPesquisaSQL(sql);
            while (conexao.rs.next()) {
                dados.add(new Object[]{
                    conexao.rs.getInt("codigo"),
                    conexao.rs.getString("nome"),
                    conexao.rs.getString("rf"),
                    conexao.rs.getString("secao"),
                    conexao.rs.getString("ramal")
                });
                totalRegs = conexao.rs.getRow(); //passando o total de registros para o titulo
            };

            ModeloTabela modelo = new ModeloTabela(dados, Colunas);
            jTabela.setModel(modelo);
            //define tamanho das colunas
            jTabela.getColumnModel().getColumn(0).setPreferredWidth(60);  //define o tamanho da coluna
            jTabela.getColumnModel().getColumn(0).setResizable(false);    //nao será possivel redimencionar a coluna 
            jTabela.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTabela.getColumnModel().getColumn(1).setResizable(false);
            jTabela.getColumnModel().getColumn(2).setPreferredWidth(80);  //define o tamanho da coluna
            jTabela.getColumnModel().getColumn(2).setResizable(false);    //nao será possivel redimencionar a coluna 
            jTabela.getColumnModel().getColumn(3).setPreferredWidth(130);
            jTabela.getColumnModel().getColumn(3).setResizable(false);
            jTabela.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTabela.getColumnModel().getColumn(4).setResizable(false);
            //define propriedades da tabela
            jTabela.getTableHeader().setReorderingAllowed(false);        //nao podera ser reorganizada
            jTabela.setAutoResizeMode(jTabela.AUTO_RESIZE_OFF);          //nao será possivel redimencionar a tabela
            jTabela.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //so podera selecionar apena uma linha  

        } catch (SQLException ex) {
            //apos a consulta acima abrir o formulario mesmo que a tabela esteja vazia  
            JOptionPane.showMessageDialog(null, "Erro ao preencher o ArrayList!\nErro: " + ex.getMessage());
        } finally {
            conexao.desconectar();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cmbSecao;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JLayeredPane jBoxBotoes;
    private javax.swing.JLayeredPane jBoxDados;
    private javax.swing.JLayeredPane jBoxPesquisar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTabela;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCODIGO;
    private javax.swing.JTextField txtNOME;
    private javax.swing.JTextField txtOBS;
    private javax.swing.JTextField txtPESQUISA;
    private javax.swing.JTextField txtRF;
    // End of variables declaration//GEN-END:variables

}
