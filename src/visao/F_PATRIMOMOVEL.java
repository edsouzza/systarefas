package visao;

import biblioteca.Biblioteca;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import conexao.ConnConexao;
import biblioteca.ModeloTabela;
import controle.CtrlPatrimovel;
import controle.ControleListaPatrimovel;
import Dao.DAOPatriMovel;
import biblioteca.MetodosPublicos;
import static biblioteca.VariaveisPublicas.TipoModelo;
import static biblioteca.VariaveisPublicas.cadastrando;
import static biblioteca.VariaveisPublicas.codigoTipoModelo;
import static biblioteca.VariaveisPublicas.nomeSecao;
import static biblioteca.VariaveisPublicas.lstListaCampos;
import static biblioteca.VariaveisPublicas.nomeRelatorio;
import static biblioteca.VariaveisPublicas.sql;
import static biblioteca.VariaveisPublicas.tabela;
import static biblioteca.VariaveisPublicas.tabela_da_lista;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.ListSelectionModel;
import static biblioteca.VariaveisPublicas.totalRegs;
import controle.ControleGravarLog;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Component;
import java.awt.Font;
import modelo.Patrimovel;
import relatorios.GerarExcelPatrimonios;
import relatorios.GerarRelatorios;

public class F_PATRIMOMOVEL extends javax.swing.JFrame {

    ConnConexao     conexao             = new ConnConexao();
    MetodosPublicos umMetodo            = new MetodosPublicos();
    Biblioteca umabiblio                = new Biblioteca();
    Patrimovel umModPatrimovel          = new Patrimovel();
    CtrlPatrimovel ctrPatrimovel        = new CtrlPatrimovel();
    ControleListaPatrimovel umCtrLista  = new ControleListaPatrimovel();
    ControleGravarLog umGravarLog       = new ControleGravarLog();
    DAOPatriMovel PatriMovelDAO         = new DAOPatriMovel();
    Boolean clicouNaTabela,gravando,editando,filtrouSecao, clicouInativos = false;
    int codigo, idSecaoRegSel, ind      = 0;
    String descricao, estacao, serial, chapa, documentacao, secao, rf, nome, sNomeSecao, obs, codigocad = "";
    String sqlDefaultATIVOS   = "select p.*, s.nome as secao, m.* from tblpatrimovel p, tblsecoes s, tblmodelos m where p.modeloid = m.codigo and p.secaoid=s.codigo and p.status='ATIVO' ORDER BY m.modelo";
    String sqlDefaultINATIVOS = "select p.*, s.nome as secao, m.* from tblpatrimovel p, tblsecoes s, tblmodelos m where p.modeloid = m.codigo and p.secaoid=s.codigo and p.status='INATIVO' ORDER BY m.modelo";
    String sqlVazia           = "select * from tblpatrimovel where codigo = 0";

    public F_PATRIMOMOVEL() {
        initComponents();        
        Leitura();
        setResizable(false);   //desabilitando o redimencionamento da tela        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE); //desabilitando o botao fechar
        this.setTitle(umabiblio.mostrarTituloDoFormulario());
        //configuracoes dos edits   
        umabiblio.configurarCamposTextos(txtPESQUISA);
        umabiblio.configurarCamposTextos(txtCODIGO);
        umabiblio.configurarCamposTextos(txtDESCRICAO);
        umabiblio.configurarCamposTextos(txtSERIAL);
        umabiblio.configurarCamposTextos(txtCHAPA);

        //Impede que formulario seja arrastado na tela
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentMoved(ComponentEvent e) {
                setEnabled(false);
                setEnabled(true);
            }
        });//fim addComponentListener       

        //configuração dos botões
        umabiblio.configurarBotoes(btnNovo);
        umabiblio.configurarBotoes(btnEditar);
        umabiblio.configurarBotoes(btnGravar);
        umabiblio.configurarBotoes(btnImprimir);
        umabiblio.configurarBotoes(btnVoltar);
        umabiblio.configurarBotoes(btnSair);
        jTabelaATIVOS.setFont(new Font("Arial", Font.BOLD, 12));
        jTabelaINATIVOS.setFont(new Font("Arial", Font.BOLD, 12));
        txtOBS.setFont(new Font("TimesRoman", Font.BOLD, 12));
        txtCODIGO.setForeground(Color.red);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBoxDados = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        txtDESCRICAO = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtCODIGO = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSERIAL = new javax.swing.JTextField();
        txtOBS = new javax.swing.JTextField();
        txtCHAPA = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbSecao = new javax.swing.JComboBox<>();
        btnFiltrarPorSecao = new javax.swing.JButton();
        jBoxBotoes = new javax.swing.JLayeredPane();
        btnGravar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnNovo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnGerarExcel = new javax.swing.JButton();
        jBoxPesquisar = new javax.swing.JLayeredPane();
        txtPESQUISA = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTabelaATIVOS = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTabelaINATIVOS = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jBoxDados.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jBoxDados.setName("panelDados"); // NOI18N

        jLabel1.setText("DESCRIÇÃO");

        txtDESCRICAO.setForeground(new java.awt.Color(51, 51, 255));
        txtDESCRICAO.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtDESCRICAO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDESCRICAOMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtDESCRICAOMouseEntered(evt);
            }
        });
        txtDESCRICAO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDESCRICAOKeyPressed(evt);
            }
        });

        jLabel3.setText("CÓDIGO");

        cmbStatus.setForeground(new java.awt.Color(51, 51, 255));
        cmbStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbStatus.setEnabled(false);

        jLabel2.setText("STATUS");

        txtCODIGO.setForeground(new java.awt.Color(51, 51, 255));
        txtCODIGO.setName("txtCODIGO"); // NOI18N

        jLabel4.setText("CHAPA");

        jLabel5.setText("SERIAL");

        txtSERIAL.setForeground(new java.awt.Color(51, 51, 255));
        txtSERIAL.setText("0");
        txtSERIAL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSERIALMouseClicked(evt);
            }
        });
        txtSERIAL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSERIALFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSERIALFocusLost(evt);
            }
        });
        txtSERIAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSERIALKeyPressed(evt);
            }
        });

        txtOBS.setForeground(new java.awt.Color(51, 51, 255));

        txtCHAPA.setForeground(new java.awt.Color(51, 51, 255));
        txtCHAPA.setText("0");
        txtCHAPA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCHAPAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCHAPAFocusLost(evt);
            }
        });
        txtCHAPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCHAPAKeyPressed(evt);
            }
        });

        jLabel9.setText("OBSERVAÇÕES");

        jLabel6.setText("SEÇÃO");

        cmbSecao.setForeground(new java.awt.Color(51, 51, 255));
        cmbSecao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbSecao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSecaoKeyPressed(evt);
            }
        });

        btnFiltrarPorSecao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_pesquisa.gif"))); // NOI18N
        btnFiltrarPorSecao.setToolTipText("Filtrar Por Seção");
        btnFiltrarPorSecao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFiltrarPorSecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarPorSecaoActionPerformed(evt);
            }
        });

        jBoxDados.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtDESCRICAO, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(cmbStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtCODIGO, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtSERIAL, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtOBS, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(txtCHAPA, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(cmbSecao, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxDados.setLayer(btnFiltrarPorSecao, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jBoxDadosLayout = new javax.swing.GroupLayout(jBoxDados);
        jBoxDados.setLayout(jBoxDadosLayout);
        jBoxDadosLayout.setHorizontalGroup(
            jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOBS)
                    .addGroup(jBoxDadosLayout.createSequentialGroup()
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jBoxDadosLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jBoxDadosLayout.createSequentialGroup()
                                .addComponent(txtCODIGO, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDESCRICAO, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jBoxDadosLayout.createSequentialGroup()
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                            .addComponent(txtSERIAL))
                        .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jBoxDadosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCHAPA, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSecao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jBoxDadosLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFiltrarPorSecao)))
                .addGap(16, 16, 16))
        );
        jBoxDadosLayout.setVerticalGroup(
            jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jBoxDadosLayout.createSequentialGroup()
                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCODIGO, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDESCRICAO, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBoxDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSERIAL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCHAPA, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbSecao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnFiltrarPorSecao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOBS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
        );

        getContentPane().add(jBoxDados);
        jBoxDados.setBounds(20, 80, 840, 190);

        jBoxBotoes.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        btnGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_gravar.jpg"))); // NOI18N
        btnGravar.setText("Gravar");
        btnGravar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_inicio.gif"))); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_sair.gif"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/users16.jpg"))); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_blocoNotas.gif"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_imprimir.gif"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnGerarExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Excel.gif"))); // NOI18N
        btnGerarExcel.setText("Excel");
        btnGerarExcel.setToolTipText("Imprime todos os patrimônios da seção selecionada");
        btnGerarExcel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGerarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarExcelActionPerformed(evt);
            }
        });

        jBoxBotoes.setLayer(btnGravar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnVoltar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnSair, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnNovo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnEditar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnImprimir, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBoxBotoes.setLayer(btnGerarExcel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jBoxBotoesLayout = new javax.swing.GroupLayout(jBoxBotoes);
        jBoxBotoes.setLayout(jBoxBotoesLayout);
        jBoxBotoesLayout.setHorizontalGroup(
            jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGerarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnImprimir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jBoxBotoesLayout.setVerticalGroup(
            jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSair, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jBoxBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnGerarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnGravar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNovo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jBoxBotoes);
        jBoxBotoes.setBounds(20, 280, 840, 67);

        jBoxPesquisar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jBoxPesquisar.setName("panelDados"); // NOI18N

        txtPESQUISA.setToolTipText("Filtrar por digitação");
        txtPESQUISA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPESQUISAKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPESQUISAKeyReleased(evt);
            }
        });

        jBoxPesquisar.setLayer(txtPESQUISA, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jBoxPesquisarLayout = new javax.swing.GroupLayout(jBoxPesquisar);
        jBoxPesquisar.setLayout(jBoxPesquisarLayout);
        jBoxPesquisarLayout.setHorizontalGroup(
            jBoxPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxPesquisarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtPESQUISA, javax.swing.GroupLayout.DEFAULT_SIZE, 818, Short.MAX_VALUE)
                .addContainerGap())
        );
        jBoxPesquisarLayout.setVerticalGroup(
            jBoxPesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBoxPesquisarLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(txtPESQUISA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(jBoxPesquisar);
        jBoxPesquisar.setBounds(20, 10, 840, 60);

        jTabbedPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });

        jTabelaATIVOS.setGridColor(new java.awt.Color(255, 255, 255));
        jTabelaATIVOS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaATIVOSMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTabelaATIVOS);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("ATIVOS", jPanel5);

        jTabelaINATIVOS.setGridColor(new java.awt.Color(255, 255, 255));
        jTabelaINATIVOS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaINATIVOSMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTabelaINATIVOS);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("INATIVOS", jPanel2);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(10, 357, 850, 320);

        setSize(new java.awt.Dimension(883, 716));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
     private void popularComboStatus() {
        cmbStatus.removeAllItems();
        cmbStatus.addItem("ATIVO");
    }
    public String MostrarSecaoSelecionada(int idSecao) {
        //utilizada quando o usuario clicar em um registro da tabela
        conexao.conectar();
        sql = "select * from tblsecoes where codigo =" + idSecao;
        conexao.ExecutarPesquisaSQL(sql);
        try {
            if (conexao.rs.next()) {
                conexao.rs.first();
                sNomeSecao = conexao.rs.getString("nome");
                cmbSecao.removeAllItems();      //primeiro apaga os ítens que foram selecionados anteriormente
                cmbSecao.addItem(sNomeSecao);   //seta a seçao do usuario selecionado                
                //JOptionPane.showMessageDialog(null,"SECAO SELECIONADA..: " +conexao.resultset.getString("nome"));
            };
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao pesquisar seção!\nErro: " + ex.getMessage());
            return null;
        }
        return sNomeSecao;
    }

    private void mostrarDadosRegSelecionado(int codigo) {
        //AO CLICAR EM UM REGISTRO DA TABELA MOSTRAR OS DADOS NOS EDITS
        sql = "select p.codigo, p.serial, p.chapa,  p.modeloid, p.secaoid,  p.obs, m.modelo as descricao from tblpatrimovel p, tblmodelos m where p.modeloid = m.codigo and p.codigo = " + codigo + "";
        conexao.conectar();
        conexao.ExecutarPesquisaSQL(sql);
        try {
            conexao.rs.first();
            //mostrando os dados do registro selecionado nos edits
            txtCODIGO.setText(String.valueOf(conexao.rs.getInt("codigo")));
            txtSERIAL.setText(conexao.rs.getString("serial"));
            txtCHAPA.setText(conexao.rs.getString("chapa"));
            txtDESCRICAO.setText(conexao.rs.getString("descricao"));
            txtOBS.setText(conexao.rs.getString("obs"));
            
            //mostro a seção
            idSecaoRegSel = conexao.rs.getInt("secaoid");
            MostrarSecaoSelecionada(idSecaoRegSel);
               
            //mostro o status
            cmbStatus.removeAllItems();
            cmbStatus.addItem(conexao.rs.getString("status"));
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao tentar selecionar a seção!\nERRO:" + ex.getMessage());
        } finally {
            conexao.desconectar();
        }

        //controla apresentacao dos edits
        txtPESQUISA.setEditable(false);
        txtCODIGO.setEnabled(true);
        txtCODIGO.setEditable(false);
        txtDESCRICAO.setEnabled(true);
        txtDESCRICAO.setEditable(false);
        txtOBS.setEnabled(true);
        txtOBS.setEditable(false);
        txtSERIAL.setEnabled(true);
        txtSERIAL.setEditable(false);
        txtCHAPA.setEnabled(true);
        txtCHAPA.setEditable(false);

    }
    
    private void mostrarDadosRegInativoSelecionado(int codigo) {
        //AO CLICAR EM UM REGISTRO DA TABELA MOSTRAR OS DADOS NOS EDITS
        sql = "select p.codigo, p.serial, p.chapa,  p.modeloid, p.secaoid,  p.obs, m.modelo as descricao from tblpatrimovel p, tblmodelos m where p.modeloid = m.codigo and p.codigo = " + codigo + "";
        conexao.conectar();
        conexao.ExecutarPesquisaSQL(sql);
        try {
            conexao.rs.first();
            //mostrando os dados do registro selecionado nos edits
            txtCODIGO.setText(String.valueOf(conexao.rs.getInt("codigo")));
            txtSERIAL.setText(conexao.rs.getString("serial"));
            txtCHAPA.setText(conexao.rs.getString("chapa"));
            txtDESCRICAO.setText(conexao.rs.getString("descricao"));
            txtOBS.setText(conexao.rs.getString("obs"));
            
            //mostro a seção
            idSecaoRegSel = conexao.rs.getInt("secaoid");
            MostrarSecaoSelecionada(idSecaoRegSel);
               
            //mostro o status
            cmbStatus.removeAllItems();
            cmbStatus.addItem("INATIVO");
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao tentar selecionar a seção!\nERRO:" + ex.getMessage());
        } finally {
            conexao.desconectar();
        }

        //controla apresentacao dos edits
        txtPESQUISA.setEditable(false);
        txtCODIGO.setEnabled(true);
        txtCODIGO.setEditable(false);
        txtDESCRICAO.setEnabled(true);
        txtDESCRICAO.setEditable(false);
        txtOBS.setEnabled(true);
        txtOBS.setEditable(false);
        txtSERIAL.setEnabled(true);
        txtSERIAL.setEditable(false);
        txtCHAPA.setEnabled(true);
        txtCHAPA.setEditable(false);

    }
    
    private void abrirListaModelos(){
               
        tabela_da_lista = "TBLMODELOS";
        F_LISTAPADRAO frm = new F_LISTAPADRAO(new javax.swing.JFrame(), true);
        frm.setVisible(true);
        
        txtSERIAL.requestFocus();
        txtDESCRICAO.setText(TipoModelo);
                 
    }    
    
    private void abrirListaSecoes(){
               
        tabela_da_lista = "TBLSECOES";
        F_LISTAPADRAO frm = new F_LISTAPADRAO(new javax.swing.JFrame(), true);
        frm.setVisible(true);
        
        cmbSecao.setSelectedItem(nomeSecao);        
                 
    }    
      
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        conexao.conectar();
        String sql = "select * from tblpatrimovel where status='ATIVO'";
        conexao.ExecutarPesquisaSQL(sql);
        try {
            if (conexao.rs.next()) {   //selecionando a primeira linha somente se tiver registros
                jTabelaATIVOS.addRowSelectionInterval(0, 0);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher o combo de seções!\nErro: " + ex.getMessage());
        } finally {
            conexao.desconectar();
        }
    }//GEN-LAST:event_formWindowOpened

    private void txtPESQUISAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPESQUISAKeyPressed
        //se teclar enter estando dentro da pesquisa limpar a pesquisa
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtPESQUISA.setText(null);
        }
    }//GEN-LAST:event_txtPESQUISAKeyPressed
    private void filtrarPorDigitacao(String pPesq) {
        
        if(!clicouInativos){
        //filtrando por digitação pelos campos serial, chapachapa, descricao ou secao
        PreencherTabelaATIVOS("select p.*, s.nome as secao,m.* from tblpatrimovel p, tblsecoes s, tblmodelos m where "
                      + "(m.modelo like '%" + pPesq + "%'" + "or s.nome like '%" + pPesq + "%'" + "or p.serial like '%" + pPesq + "%'" + "or p.chapa like '%" + pPesq + "%'" + ") "
                      + "and p.modeloid = m.codigo and p.secaoid=s.codigo and p.status='ATIVO' order by m.modelo");
        this.setTitle("Total de registros retornados pela pesquisa = "+totalRegs);
        }else{
        PreencherTabelaINATIVOS("select p.*, s.nome as secao,m.* from tblpatrimovel p, tblsecoes s, tblmodelos m where "
                      + "(m.modelo like '%" + pPesq + "%'" + "or s.nome like '%" + pPesq + "or p.serial like '%" + pPesq + "%'" +" or p.chapa like '%" + pPesq + "%'" + ") "
                      + "and p.modeloid = m.codigo and p.secaoid=s.codigo and p.status='INATIVO' order by m.modelo");
        this.setTitle("Total de registros retornados pela pesquisa = "+totalRegs);
        }
        btnVoltar.setEnabled(true);
    }
    private void txtPESQUISAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPESQUISAKeyReleased
        //filtrar o nome conforme o cliente for digitando
        filtrarPorDigitacao(txtPESQUISA.getText());
    }//GEN-LAST:event_txtPESQUISAKeyReleased

    private void txtSERIALMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSERIALMouseClicked
        txtSERIAL.selectAll();
    }//GEN-LAST:event_txtSERIALMouseClicked

    private void txtDESCRICAOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDESCRICAOKeyPressed
        //se teclar enter estando dentro do txtNOME vá para o campo do rf
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtSERIAL.requestFocus();
        }
    }//GEN-LAST:event_txtDESCRICAOKeyPressed

    private void txtSERIALKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSERIALKeyPressed
        //se teclar enter estando dentro do txtNOME vá para o campo do rf
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtCHAPA.requestFocus();
        }
    }//GEN-LAST:event_txtSERIALKeyPressed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        //JOptionPane.showMessageDialog(rootPane, filtrouSecao);
        if(filtrouSecao){        
            //imprimir apenas os patrimonios da seção filtrada
            GerarRelatorios objRel = new GerarRelatorios();
            try {
                nomeRelatorio = "relpatrimovelsecaoselecionada"; 
                objRel.imprimirPatrimoniosFiltrados("relatorio/"+nomeRelatorio+".jasper", cmbSecao.getSelectedItem().toString() ,tabela);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao gerar relatório!\n"+e);                
            }      
        }else{
            if (clicouNaTabela && !filtrouSecao){
                //imprimir o patrimonio que foi selecionado tendo o codigo como parametro
                int codigoSelecionado = Integer.parseInt(txtCODIGO.getText());
                nomeRelatorio = "relpatrimovelselecionado";                
                GerarRelatorios objRel = new GerarRelatorios();
                try {
                    objRel.imprimirPatrimonioSelecionado("relatorio/"+nomeRelatorio+".jasper",codigoSelecionado,tabela);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao gerar relatório!\n"+e);                
                }   
            } else {
                //imprimir todos os patrimonios cadastrados
                nomeRelatorio = "relpatrimoniosmoveis";  
                F_IMPRESSAO frm = new F_IMPRESSAO();
                frm.setVisible(true);
            }
            
        }
        btnVoltar.setEnabled(true);
        btnImprimir.setEnabled(false);
        btnEditar.setEnabled(false);
        cmbSecao.setEnabled(false);
        btnGerarExcel.setEnabled(false);
        btnFiltrarPorSecao.setEnabled(false);
        filtrouSecao   = false;
        clicouNaTabela = false;
        editando       = false;
        
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if(umabiblio.permissaoLiberada()){
            Edicao();
            editando = true;
            if (!clicouInativos) {        
                //controla apresentacao dos edits
                txtSERIAL.setEditable(true);
                txtCHAPA.setEditable(true);
                txtOBS.setEditable(true);
                txtSERIAL.requestFocus();
                btnGerarExcel.setEnabled(false);
                btnFiltrarPorSecao.setEnabled(false);

                //limpa a como secao
                cmbSecao.removeAllItems();
                //popular a combo secao com todas as secoes cadastradas
                umabiblio.PreencherCombo(cmbSecao, "tblsecoes", "nome");
                //seta a seção atual do usuario atraves do nome da seçao passada
                cmbSecao.getModel().setSelectedItem(sNomeSecao);

                //popular a combo status com opcoes ATIVO pra manter inalterado e INATIVO caso deseje inativar
                cmbStatus.removeAllItems();
                cmbStatus.addItem("ATIVO");
                cmbStatus.addItem("INATIVO");

                PreencherTabelaATIVOS(sqlVazia);
           }else{
                //popular a combo status com opcoes ATIVO pra manter inalterado e INATIVO caso deseje inativar                
                btnFiltrarPorSecao.setEnabled(false);
                cmbStatus.removeAllItems();
                cmbStatus.addItem("ATIVO");   
                
                //reativando registro restringindo a possibilidade de edição da descrição do patrimonio
                if (umabiblio.ConfirmouOperacao("Confirma a reativação deste registro?", "Reativando registro!")){
                    btnGravarActionPerformed(null);
                }else{
                    btnVoltarActionPerformed(null);
                }
           }
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        //populando os combobox - Verifica permissão de usuário
        if(umabiblio.permissaoLiberada()){
            popularComboStatus();
            umabiblio.PreencherCombo(cmbSecao, "tblsecoes", "nome");
            //controlando os botoes
            HabilitarDesabilitarBotoes(false);
            btnGerarExcel.setEnabled(false);
            btnVoltar.setText("Cancelar");
            btnFiltrarPorSecao.setEnabled(false);
            umabiblio.limparTodosCampos(jBoxDados);
            txtPESQUISA.setText(null);     
            txtOBS.setEditable(true);
            txtSERIAL.setEditable(true);
            txtCHAPA.setEditable(true);
            txtSERIAL.setText("0");
            txtCHAPA.setText("0");
            gravando = true;
            cadastrando = true;
            txtCODIGO.setText(String.valueOf(umabiblio.mostrarProximoCodigo(tabela)));
            PreencherTabelaATIVOS(sqlVazia);

            if(cadastrando){                        
                abrirListaModelos(); 
                abrirListaSecoes();
            }
        }
        
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        Leitura();        
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        if (gravando) {
            gravarRegistro();
        } else {
            editarRegistro();
        }
        Leitura();
    }//GEN-LAST:event_btnGravarActionPerformed

    private void txtSERIALFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSERIALFocusGained
        txtSERIAL.selectAll();
    }//GEN-LAST:event_txtSERIALFocusGained

    private void txtCHAPAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCHAPAFocusGained
        txtCHAPA.selectAll();
    }//GEN-LAST:event_txtCHAPAFocusGained

    private void txtCHAPAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCHAPAKeyPressed
        //se teclar enter estando dentro do txt vá para o proximo campo
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbSecao.requestFocus();
        }
    }//GEN-LAST:event_txtCHAPAKeyPressed

    private void cmbSecaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSecaoKeyPressed
         //se teclar enter estando dentro do txt vá para o proximo campo
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtOBS.requestFocus();
        }
    }//GEN-LAST:event_cmbSecaoKeyPressed
    
    public void filtrarPorSecao(int idSecao)
    {
         PreencherTabelaATIVOS("select p.*, s.nome as secao, m.* from tblpatrimovel p, tblsecoes s, tblmodelos m where p.modeloid = m.codigo and p.secaoid=s.codigo and s.codigo='" + idSecao + "'" +"and p.status='ATIVO' ORDER BY m.modelo ");
         PreencherTabelaINATIVOS("select p.*, s.nome as secao, m.* from tblpatrimovel p, tblsecoes s, tblmodelos m where p.modeloid = m.codigo and p.secaoid=s.codigo and s.codigo='" + idSecao + "'" +"and p.status='INATIVO' ORDER BY m.modelo ");
    }
    
    private void btnFiltrarPorSecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarPorSecaoActionPerformed
        totalRegs=0;
        int indiceSecaoSelecionada = cmbSecao.getSelectedIndex();      
        if(indiceSecaoSelecionada == -1)
        {
             JOptionPane.showMessageDialog(null, "Escolha uma seção ao lado para filtrar!", "Seção não selecionada", 2);
             btnVoltar.setEnabled(false);
             btnVoltar.setText("Voltar");
             filtrouSecao=false;
        }else{
            sNomeSecao=cmbSecao.getSelectedItem().toString();
            nomeSecao=cmbSecao.getSelectedItem().toString();
            int idSecao = umabiblio.buscarCodigoSecao(sNomeSecao);
            filtrouSecao=true;
            filtrarPorSecao(idSecao);       
            btnVoltar.setEnabled(true);
            btnVoltar.setText("Limpar");
            btnNovo.setEnabled(false);
            cmbSecao.setEnabled(false);
            btnFiltrarPorSecao.setEnabled(false);
            btnImprimir.setEnabled(true);
            this.setTitle("Total de registros retornados pela pesquisa = "+totalRegs);  //passando o total de registros para o titulo
        }
        
    }//GEN-LAST:event_btnFiltrarPorSecaoActionPerformed

    private void GerarExcel(){
       /*retorna todos os campos da tabela ideal quando tiver chaves estrangeiras na tabela você passa a SQL completa dos dados
         importante salientar que não podem haver dados nulos ou vazios campos selecionados dos registros */
        nomeSecao   = cmbSecao.getSelectedItem().toString();
        int idSecao = umabiblio.buscarCodigoSecao(nomeSecao);
        
        GerarExcelPatrimonios excel = new GerarExcelPatrimonios();     

        sql =   "select p.codigo, s.nome as secao, m.modelo, p.serial, p.chapa, p.obs " +
                "from tblpatrimovel p, tblsecoes s, tblmodelos m " +
                "where " +
                "p.modeloid = m.codigo " +
                "and " +
                "p.secaoid=s.codigo " +
                "and " +
                "p.secaoid= "+idSecao+ "and " +
                "p.status='ATIVO' " +
                "ORDER BY m.modelo";        
                
        lstListaCampos.clear();   
        umMetodo.preencherArrayListComCampos(lstListaCampos, sql);
        
        ArrayList<Object[]> dataList = excel.getListaDados(sql);        
        if (dataList != null && dataList.size() > 0) {
            excel.doExportar(dataList);
        } else {
            JOptionPane.showMessageDialog(null, "Não há dados disponíveis na tabela para exportacao, operação cancelada!", "Erro Fatal, verifique a SQL!", 2);
        }
        umGravarLog.gravarLog("impressao de relatorio : "+umMetodo.retornaNomeTabela(tabela)); 
    }
    
    private void btnGerarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarExcelActionPerformed
        totalRegs=0;
        int indiceSecaoSelecionada = cmbSecao.getSelectedIndex();      
        if(indiceSecaoSelecionada == -1)
        {
             JOptionPane.showMessageDialog(null, "Escolha uma seção acima para gerar o relatório!", "Seção não selecionada", 2);
             btnVoltar.setEnabled(true);
             btnVoltar.setText("Voltar");
             cmbSecao.setEnabled(false);
             btnFiltrarPorSecao.setEnabled(false);
             btnGerarExcel.setEnabled(false);
             btnImprimir.setEnabled(false);             
             filtrouSecao=false;
        }else{
            GerarExcel();
        }       
        
    }//GEN-LAST:event_btnGerarExcelActionPerformed

    private void jTabelaATIVOSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaATIVOSMouseClicked
        //AO CLICAR EM UM REGISTRO DA TABELA MOSTRAR OS DADOS NOS EDITS
        //passando o codigo do patrimonio para o metodo => (int) jTabelaATIVOS.getValueAt(jTabelaATIVOS.getSelectedRow(), 0) é igual ao codigo do patrimonio selecionado
        int codigoRegSelecionado = (int) jTabelaATIVOS.getValueAt(jTabelaATIVOS.getSelectedRow(), 0);
        mostrarDadosRegSelecionado(codigoRegSelecionado);
        clicouNaTabela = true;
        btnEditar.setEnabled(true);
        btnGravar.setEnabled(false);
        btnNovo.setEnabled(false);
        btnImprimir.setEnabled(true); //assim poderá imprimir o registro selecionado
        btnVoltar.setEnabled(true);
        btnSair.setEnabled(false);
        cmbSecao.setEnabled(true);
        cmbStatus.setEnabled(true);
        btnFiltrarPorSecao.setEnabled(false);

    }//GEN-LAST:event_jTabelaATIVOSMouseClicked

    private void jTabelaINATIVOSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaINATIVOSMouseClicked
         //AO CLICAR EM UM REGISTRO DA TABELA MOSTRAR OS DADOS NOS EDITS
        //passando o codigo do patrimonio para o metodo => (int) jTabelaATIVOS.getValueAt(jTabelaATIVOS.getSelectedRow(), 0) é igual ao codigo do patrimonio selecionado
        int codigoRegSelecionado = (int) jTabelaINATIVOS.getValueAt(jTabelaINATIVOS.getSelectedRow(), 0);
        mostrarDadosRegInativoSelecionado(codigoRegSelecionado);
        clicouNaTabela = true;
        btnEditar.setEnabled(true);
        btnEditar.setText("Reativar");
        btnGravar.setEnabled(false);
        btnNovo.setEnabled(false);        
        btnVoltar.setEnabled(true);        
        btnSair.setEnabled(false);
        cmbSecao.setEnabled(true);
        cmbStatus.setEnabled(true);
        btnFiltrarPorSecao.setEnabled(false);
    }//GEN-LAST:event_jTabelaINATIVOSMouseClicked

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        //se clicou na aba INATIVOS        
        if (jTabbedPane2.getSelectedIndex() == 1) {
            umabiblio.limparTodosCampos(jBoxDados);
            btnFiltrarPorSecao.setEnabled(false);
            btnGerarExcel.setEnabled(false);
            btnImprimir.setEnabled(false);
            btnEditar.setEnabled(false);
            cmbSecao.setEnabled(false);
            cmbSecao.setSelectedIndex(-1);
            cmbStatus.setEnabled(false);
            cmbStatus.setSelectedIndex(-1);
            btnNovo.setEnabled(false);         
            clicouInativos=true;
        } else if (jTabbedPane2.getSelectedIndex() == 0) {
            //se clicou na aba ATIVOS 
            umabiblio.limparTodosCampos(jBoxDados);
            btnVoltarActionPerformed(null);
        }

    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void txtDESCRICAOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDESCRICAOMouseClicked
        //mudar o ponteiro do mouse
        if(editando && clicouNaTabela){                        
            abrirListaModelos(); 
            txtDESCRICAO.setEditable(false);
        }  
    }//GEN-LAST:event_txtDESCRICAOMouseClicked

    private void txtDESCRICAOMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDESCRICAOMouseEntered
        
        if(editando && clicouNaTabela){                        
            txtDESCRICAO.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }  
    }//GEN-LAST:event_txtDESCRICAOMouseEntered

    private void txtSERIALFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSERIALFocusLost
        String novoSerial = txtSERIAL.getText();
        if(cadastrando){ 
            if(PatriMovelDAO.duplicidadeSerial(txtSERIAL.getText()))
            {                
                JOptionPane.showMessageDialog(null,"Atenção o patrimônio "+novoSerial+" esta cadastrado ou inativado, se for o caso reative-o!","Encontrada duplicidade de patrimônio!",2);                
                btnVoltarActionPerformed(null);
            };            
        }
    }//GEN-LAST:event_txtSERIALFocusLost

    private void txtCHAPAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCHAPAFocusLost
        //Só deixa dar andamento do cadastro se o usuário tiver digitado serial ou chapa ou os dois 
        if(cadastrando){ 
            if (umabiblio.patrimovel_serie_chapa_nulos(txtSERIAL.getText(), txtCHAPA.getText())){
               JOptionPane.showMessageDialog(null, "Atenção você deve entrar com uma série ou chapa para continuar o cadastro!", "Entradas nulas!", 2); 
               txtSERIAL.requestFocus();                
             }else{                
              
                String novaChapa = txtCHAPA.getText();                
                if(PatriMovelDAO.duplicidadeChapa(txtCHAPA.getText()))
                {
                    JOptionPane.showMessageDialog(null,"Atenção o patrimônio "+novaChapa+" esta cadastrado ou inativado, se for o caso reative-o!","Encontrada duplicidade de patrimônio!",2);                
                    btnVoltarActionPerformed(null);
                };   
            }  
            
        }
    }//GEN-LAST:event_txtCHAPAFocusLost

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_PATRIMOMOVEL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_PATRIMOMOVEL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_PATRIMOMOVEL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_PATRIMOMOVEL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_PATRIMOMOVEL().setVisible(true);

            }
        });
    }

    private void gravarRegistro() {
        //se digitou algo nos campos DESCRICAO SERIAL OU CHAPA vai aceitar a inserção
        if (txtDESCRICAO.getText().length() > 0 && txtSERIAL.getText().length() > 0 || txtCHAPA.getText().length() > 0) {
            //setando os valores dos edits   
            String nomeSecao = cmbSecao.getSelectedItem().toString(); //passando o nome da secao selecionada 
            chapa            = txtCHAPA.getText();
            serial           = txtSERIAL.getText();
            obs              = txtOBS.getText();
            //codigocad        = txtCODIGO.getText();
            String status    = cmbStatus.getSelectedItem().toString();
            String secao     = cmbSecao.getSelectedItem().toString();

            int codSecao = PatriMovelDAO.buscarCodigoSecao(nomeSecao);       //passando o codigo da secao selecionada             
            
            umModPatrimovel.setSerial(serial);
            umModPatrimovel.setChapa(chapa);
            umModPatrimovel.setModeloid(codigoTipoModelo);
            umModPatrimovel.setSecaoid(codSecao);
            umModPatrimovel.setStatus(status);
            umModPatrimovel.setObs(obs);

            if (gravando) {
                if (!PatriMovelDAO.RegistroDuplicado(serial,chapa)) //se nao estiver duplicado libera a gravaçao do registro
                {
                    ctrPatrimovel.salvarPatrimovel(umModPatrimovel);
                    umGravarLog.gravarLog("cadastro de " + umModPatrimovel.getDescricao());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null,"Preencha todos os campos para continuar!","Você deixou algum campo vazio!",2);   
            txtSERIAL.requestFocus(); //foco no campo secao
        }
        PreencherTabelaATIVOS(sqlDefaultATIVOS);
        gravando = false;
    }

    private void editarRegistro() {
        //setando os valores dos edits  
        String status = (String) cmbStatus.getSelectedItem();
        serial        = txtSERIAL.getText();
        chapa         = txtCHAPA.getText();
        obs           = txtOBS.getText();
        codigo        = Integer.parseInt(txtCODIGO.getText());

        //recebe o codigo da seção selecionada pela variavel codigo no retorno da função
        int   idSecao = PatriMovelDAO.buscarCodigoSecao(cmbSecao.getSelectedItem().toString());
               
        umModPatrimovel.setSerial(serial);
        umModPatrimovel.setChapa(chapa);        
                
        codigoTipoModelo = umMetodo.getCodigoPassandoString("tblmodelos", "modelo", txtDESCRICAO.getText());
        umModPatrimovel.setModeloid(codigoTipoModelo);
        umModPatrimovel.setSecaoid(idSecao);
        umModPatrimovel.setStatus(status);
        umModPatrimovel.setObs(obs);

        ctrPatrimovel.atualizarPatrimovel(umModPatrimovel);
        umGravarLog.gravarLog("atualizacao no cadastro de " + umModPatrimovel.getDescricao());

        Leitura();
        PreencherTabelaATIVOS(sqlDefaultATIVOS);
        txtDESCRICAO.setEditable(false);
        
    }

    private void Edicao() {
        //metodo para quando usuario clicar em Editar
        boolean Habilitar = true;
        Component[] c     = null;        
        gravando          = false;

        btnNovo.setEnabled(!Habilitar);
        btnImprimir.setEnabled(!Habilitar);
        btnSair.setEnabled(!Habilitar);
        btnGravar.setEnabled(Habilitar);
        btnEditar.setEnabled(!Habilitar);
        btnVoltar.setEnabled(Habilitar);
        btnVoltar.setText("Cancelar");

        //preenchendo a tabela com os registros
        PreencherTabelaATIVOS(sqlDefaultATIVOS);

        //desabilitando os edits para edicao
        c = jBoxDados.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(Habilitar);
        }
        txtCODIGO.setEditable(false);
        txtDESCRICAO.requestFocus();

        //mostrando o titulo com qde de registros cadastrados
        this.setTitle(umabiblio.mostrarTituloDoFormulario());

        //habilitando a pesquisa  e preenchendo a tabela se tiver registros
        c = jBoxPesquisar.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(!Habilitar);
        }
    }

    public void Leitura() {
        //formatacao inicial dos botoes ao abrir o formulario
        boolean Habilitar = true;
        Component[] c = null;
        gravando        = false;
        clicouNaTabela  = false;
        clicouInativos  = false;
        cadastrando     = false;
        editando        = false;
        serial          = txtSERIAL.getText();
        chapa           = txtCHAPA.getText();
        
        txtPESQUISA.setEditable(true);  
        txtDESCRICAO.setEditable(false);
        btnNovo.setEnabled(Habilitar);
        btnImprimir.setEnabled(Habilitar);
        btnSair.setEnabled(Habilitar);
        btnGravar.setEnabled(!Habilitar);
        btnEditar.setEnabled(!Habilitar);
        btnVoltar.setEnabled(!Habilitar);
        btnGerarExcel.setEnabled(Habilitar);
        btnEditar.setText("Editar");
        txtDESCRICAO.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
        //umabiblio.limparTodosCampos(jBoxDados);
        jTabbedPane2.setSelectedIndex(0);
        
        //preenchendo a tabela com os registros
        PreencherTabelaATIVOS(sqlDefaultATIVOS);
        PreencherTabelaINATIVOS(sqlDefaultINATIVOS);

        //desabilitando os edits para edicao
        c = jBoxDados.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(!Habilitar);
            umabiblio.limparTodosCampos(this);
            txtPESQUISA.requestFocus();
        }

        //mostrando o titulo com qde de registros cadastrados
        this.setTitle(umabiblio.mostrarTituloDoFormulario());

        //populando a combo de seções somente com seções que estão com patrimonios cadastrados
        String sqlcmb="select distinct s.nome as secao from tblpatrimovel p, tblsecoes s where p.secaoid=s.codigo order by secao";
        umabiblio.PreencherComboVariandoTipo(cmbSecao, sqlcmb, "nome");
        cmbSecao.setSelectedIndex(-1);        
        cmbSecao.setEnabled(true);
        cmbStatus.setSelectedIndex(-1);

        //habilitando a pesquisa  e preenchendo a tabela se tiver registros
        c = jBoxPesquisar.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(Habilitar);
        }
        
        btnFiltrarPorSecao.setEnabled(true);
        btnVoltar.setText("Voltar");
        filtrouSecao=false;
    }

    public void HabilitarDesabilitarBotoes(boolean Habilitar) {
        //ações para quando clicar em cada botão
        Component[] c = null;

        btnNovo.setEnabled(Habilitar);
        btnGravar.setEnabled(!Habilitar);
        btnEditar.setEnabled(Habilitar);
        btnVoltar.setEnabled(!Habilitar);
        btnImprimir.setEnabled(Habilitar);
        btnSair.setEnabled(Habilitar);
        

        //habilitando os edits para edicao
        c = jBoxDados.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(!Habilitar);
        }

        //desabilitando a pesquisa enquanto cadastra
        c = jBoxPesquisar.getComponents();
        for (int i = 0; i < c.length; i++) {
            c[i].setEnabled(Habilitar);
        }

    }

    public void PreencherTabelaATIVOS(String sql) {
        conexao.conectar();
        ArrayList dados = new ArrayList();
        //para receber os dados das colunas(exibe os titulos das colunas)
        String[] Colunas = new String[]{"Código", "Serial", "Chapa", "Descrição", "Seção"};
        try {
            conexao.ExecutarPesquisaSQL(sql);
            while (conexao.rs.next()) {
                dados.add(new Object[]{
                    conexao.rs.getInt("codigo"),
                    conexao.rs.getString("serial"),
                    conexao.rs.getString("chapa"),
                    conexao.rs.getString("modelo"),
                    conexao.rs.getString("secao")
                });
                totalRegs = conexao.rs.getRow(); //passando o total de registros para o titulo
            };

            ModeloTabela modelo = new ModeloTabela(dados, Colunas);
            jTabelaATIVOS.setModel(modelo);
            //define tamanho das colunas
            jTabelaATIVOS.getColumnModel().getColumn(0).setPreferredWidth(50);  //define o tamanho da coluna
            jTabelaATIVOS.getColumnModel().getColumn(0).setResizable(false);    //nao será possivel redimencionar a coluna 
            jTabelaATIVOS.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTabelaATIVOS.getColumnModel().getColumn(1).setResizable(false);
            jTabelaATIVOS.getColumnModel().getColumn(2).setPreferredWidth(150);  //define o tamanho da coluna
            jTabelaATIVOS.getColumnModel().getColumn(2).setResizable(false);    //nao será possivel redimencionar a coluna 
            jTabelaATIVOS.getColumnModel().getColumn(3).setPreferredWidth(350);
            jTabelaATIVOS.getColumnModel().getColumn(3).setResizable(false);
            jTabelaATIVOS.getColumnModel().getColumn(4).setPreferredWidth(120);
            jTabelaATIVOS.getColumnModel().getColumn(4).setResizable(false);
            //define propriedades da tabela
            jTabelaATIVOS.getTableHeader().setReorderingAllowed(false);        //nao podera ser reorganizada
            jTabelaATIVOS.setAutoResizeMode(jTabelaATIVOS.AUTO_RESIZE_OFF);          //nao será possivel redimencionar a tabela
            jTabelaATIVOS.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //so podera selecionar apena uma linha  

        } catch (SQLException ex) {
            //apos a consulta acima abrir o formulario mesmo que a tabela esteja vazia  
            JOptionPane.showMessageDialog(null, "Erro ao preencher o ArrayList!\nErro: " + ex.getMessage());
        } finally {
            conexao.desconectar();
        }
    }
    
    public void PreencherTabelaINATIVOS(String sql) {
        conexao.conectar();
        ArrayList dados = new ArrayList();
        //para receber os dados das colunas(exibe os titulos das colunas)
        String[] Colunas = new String[]{"Código", "Serial", "Chapa", "Descrição", "Seção"};
        try {
            conexao.ExecutarPesquisaSQL(sql);
            while (conexao.rs.next()) {
                dados.add(new Object[]{
                    conexao.rs.getInt("codigo"),
                    conexao.rs.getString("serial"),
                    conexao.rs.getString("chapa"),
                    conexao.rs.getString("modelo"),
                    conexao.rs.getString("secao")
                });
                totalRegs = conexao.rs.getRow(); //passando o total de registros para o titulo
            };

            ModeloTabela modelo = new ModeloTabela(dados, Colunas);
            jTabelaINATIVOS.setModel(modelo);
            //define tamanho das colunas
            jTabelaINATIVOS.getColumnModel().getColumn(0).setPreferredWidth(50);  //define o tamanho da coluna
            jTabelaINATIVOS.getColumnModel().getColumn(0).setResizable(false);    //nao será possivel redimencionar a coluna 
            jTabelaINATIVOS.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTabelaINATIVOS.getColumnModel().getColumn(1).setResizable(false);
            jTabelaINATIVOS.getColumnModel().getColumn(2).setPreferredWidth(150);  //define o tamanho da coluna
            jTabelaINATIVOS.getColumnModel().getColumn(2).setResizable(false);    //nao será possivel redimencionar a coluna 
            jTabelaINATIVOS.getColumnModel().getColumn(3).setPreferredWidth(350);
            jTabelaINATIVOS.getColumnModel().getColumn(3).setResizable(false);
            jTabelaINATIVOS.getColumnModel().getColumn(4).setPreferredWidth(120);
            jTabelaINATIVOS.getColumnModel().getColumn(4).setResizable(false);
            //define propriedades da tabela
            jTabelaINATIVOS.getTableHeader().setReorderingAllowed(false);        //nao podera ser reorganizada
            jTabelaINATIVOS.setAutoResizeMode(jTabelaINATIVOS.AUTO_RESIZE_OFF);          //nao será possivel redimencionar a tabela
            jTabelaINATIVOS.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //so podera selecionar apena uma linha  

        } catch (SQLException ex) {
            //apos a consulta acima abrir o formulario mesmo que a tabela esteja vazia  
            JOptionPane.showMessageDialog(null, "Erro ao preencher o ArrayList!\nErro: " + ex.getMessage());
        } finally {
            conexao.desconectar();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnFiltrarPorSecao;
    private javax.swing.JButton btnGerarExcel;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cmbSecao;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JLayeredPane jBoxBotoes;
    private javax.swing.JLayeredPane jBoxDados;
    private javax.swing.JLayeredPane jBoxPesquisar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTabelaATIVOS;
    private javax.swing.JTable jTabelaINATIVOS;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCHAPA;
    private javax.swing.JTextField txtCODIGO;
    private javax.swing.JTextField txtDESCRICAO;
    private javax.swing.JTextField txtOBS;
    private javax.swing.JTextField txtPESQUISA;
    private javax.swing.JTextField txtSERIAL;
    // End of variables declaration//GEN-END:variables

}
